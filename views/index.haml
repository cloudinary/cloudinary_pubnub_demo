!!!
%html{:xmlns => "http://www.w3.org/1999/xhtml", "xmlns:og" => "http://opengraphprotocol.org/schema/", "xmlns:fb" => "http://www.facebook.com/2008/fbml" }<
  %head
    %meta{:content => "text/html;charset=UTF-8", "http-equiv" => "Content-Type"}/
    %title Photo Share - Cloudinary and PubNub demo
    %link{:href => "http://cloudinary.com/favicon.png", :rel => "shortcut icon", :type => "image/png"}
    -# Including jQuery, a 'timeago' plugin, 4 files required by jQuery-File-Upload, Cloudinary's jQuery plugin and PubNub's Javascript library
    %script{:type => "text/javascript", :src => "/js/jquery.min.js"}
    %script{:type => "text/javascript", :src => "/js/jquery.timeago.js"}
    %script{:type => "text/javascript", :src => "/js/jquery.ui.widget.js"}
    %script{:type => "text/javascript", :src => "/js/jquery.iframe-transport.js"}  
    %script{:type => "text/javascript", :src => "/js/jquery.fileupload.js"}
    %script{:type => "text/javascript", :src => "/js/jquery.cloudinary.js"}
    %script{:type => "text/javascript", :src => "http://pubnub.s3.amazonaws.com/pubnub-3.1.min.js"}
      
    %link{:href => "/stylesheets/photo_share.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}
    
    -# Inserting Javascript code with Cloudinary's configuration of your account.
    -# Note: Assuming you have the CLOUDINARY_URL environment variable defined in your server environment.
    = cloudinary_js_config
    
    -# Cloudinary's transformation of adding a watermark
    -# Note: Assuming you uploaded an image with the public ID of 'logos_watermark' to your Cloudinary's account
    - watermark = { overlay: 'logos_watermark', width: 0.7, flags: 'relative', opacity: 50 }

    -# Cloudinary's incoming transformation of limiting to 1200x1200 and adding a watermark
    - incoming_transformation = [{ width: 1200, height: 1200, crop: 'limit'}, watermark]     
    
    -# Cloudinary's transformations of 4 thumbnails based on face detection, rounded corners and various effects
    - transformations = { natural: { width: 150, height: 100, crop: 'fill', gravity: 'face', radius: 20 },
      sepia: { width: 150, height: 100, crop: 'fill', gravity: 'face', radius: 20, effect: 'sepia' },
      improved: { width: 150, height: 100, crop: 'fill', gravity: 'face', radius: 20, effect: 'improve' },
      blue: { transformation: [ { width: 150, height: 100, crop: 'fill', gravity: 'face', radius: 20, effect: 'hue:70' }, { effect: 'blue:50' } ] } };
    
    -# Cloudinary's transformation for up to 600x600 large image view.
    - large_transformation = { width: 600, height: 600, crop: 'limit' }
              
    :javascript     
      $(function() {

        var transformations = #{transformations.to_json};
        var large_transformation = #{large_transformation.to_json};

        // Intializing PubNub Javascript client.
        var channel = '#{@channel}';
        var pubnub = PUBNUB.init({ subscribe_key : '#{@subscribe_key}' });

        // A function for displaying a live message received from the PubNub channel
        function show_message(message) {
          // Build Cloudinary URL of the large image. 
          var large_image_url = $.cloudinary.url(message.cloudinary_photo_id, large_transformation); 
          
          var li = $('<li></li>').addClass('photo_item').hide();
          
          // Add a clickable thumbnail generated by Cloudinary and delivered through a CDN.
          var link = $('<a></a>').addClass('image_link').attr('target', '_blank').
            attr('href', large_image_url).append($.cloudinary.image(message.cloudinary_photo_id, transformations[message.kind]));           
          $(li).append(link);
          $(li).append($('<span></span>').addClass('user').text(message.user));
          $(li).append($('<span></span>').addClass('message').text(message.message));
          $(li).append($('<a></a>').addClass('view_link').attr('target', '_blank').attr('href', large_image_url).text('View image'));
          $(li).append($('<abbr></abbr>').addClass('timeago').attr('title', message.time).timeago());
          
          // Add the message item to the live stream view.
          $('.stream').prepend(li);
          $(li).show('slow');
        }
        
        // Subscribe to PubNub channel. Show received messages.
        pubnub.subscribe({
          channel : channel,
          callback : show_message 
        });
        
        // Fetch 5 messages from the PubNub history of the channel and show them in the live stream.
        pubnub.history({
          channel  : channel,
          limit    : 5,
          callback : function(history) { $.each(history, function() { show_message(this); })}
        });

        // Send image identifier, user's name & message to the server that will publish it to the channel.
        $('.share_form').submit(function() {          
          $.ajax({
            type: "POST",
            url: $(this).attr('action'),
            dataType: 'json',
            data: $(this).serialize()
          });
          $('.upload_section').removeClass('uploaded');
          return false;
        });
                
        // Display the upload progress bar when uploading starts.           
        $('.cloudinary-fileupload').bind('fileuploadstart', function(e, data) {
          $('.progress_bar .completed').css('width', '0%');
          $('.upload_section').addClass('uploading');
        });

        // Update the progress bar.
        $('.cloudinary-fileupload').bind('fileuploadprogress', function(e, data) {
          $('.progress_bar .completed').css('width', Math.round((data.loaded * 100.0) / data.total) + '%');    
        });
            
        // When uploading is completed, show the 4 thumbnails and photo sharing form.    
        $('.cloudinary-fileupload').bind('cloudinarydone', function(e, data) {
          jQuery("abbr.timeago").timeago();
          $.each(transformations, function(kind, transformation) {
            $('.kind_selection .' + kind + ' .image').html(              
              $.cloudinary.image(data.result.public_id, 
                $.extend({ format: data.result.format, version: data.result.version }, transformation))               
            );
          });             
          $('.upload_section').removeClass('uploading').addClass('uploaded');
        });

        // Define a drag & drop area and update its look & feel while dragging.
        $('.cloudinary-fileupload').fileupload('option', 'dropZone',  $('.drag_area'));
        $(document).bind('dragover', function (e) {
            var dropZone = $('.drag_area'),
            timeout = window.dropZoneTimeout;
            if (!timeout) {
                dropZone.addClass('in');
            } else {
                clearTimeout(timeout);
            }
            window.dropZoneTimeout = setTimeout(function () {
                window.dropZoneTimeout = null;
                dropZone.removeClass('in');
            }, 100);
        });     
                    
        // Show technical details panel when clicking on a link.
        $('.details_link').click(function() {
          $('.technical_details').show();
          return false;
        });

        // Hide technical details panel on click.
        $('.technical_details .close').click(function() {
          $('.technical_details').hide();
          return false;
        });
        
      });
      
      
  %body
    #photo_share
      -# Header with PubNub's and Cloudinary's logos dynamically delivered by Cloudinary.
      #header
        .inner
          %a{:href => "http://cloudinary.com/", :target => "_blank"}
            = cl_image_tag("cloudinary_logo.png", :height => 30, :width => 142, :crop => :scale, :class => "cloudinary_logo")
          %h1 Photo Share - Demo
          %a{:href => "http://www.pubnub.com/", :target => "_blank"}
            = cl_image_tag("pubnub_logo.png", :height => 24, :width => 107, :crop => :scale, :class => "pubnub_logo")
                      
      #content    
        .upload_section
          %form.share_form{:action => "/share", :method => "POST"}

            -# Drag & drop and image selection aread.
            .drag_area
              .drag_inner
                %span 
                  Drop Photo Here
                  %span.small or
                .upload_button_holder  
                  %input{:type => "submit", :value => "Select Photo", :class => "select_files"}
                  -# Cloudinary's direct image uploading tag with incoming and eager transformations. Signature is generated on the server side.     
                  = cl_image_upload_tag(:photo_id, :transformation => incoming_transformation, :eager => transformations.values + [large_transformation])
                  
            %a{:href => "#", :class => "details_link"} How does it work?
            
            -# Uploading progress bar
            .upload_progress
              %span Uploading...
              .progress_bar
                .completed
            
            -# Photo sharing form  
            .share_details_section
             
              -# Radio buttons for selecting thr desired transformed thumbnail  
              %ul.kind_selection
                %li.natural
                  %label{:for => "kind_field_natural"}
                    %span.name Natural
                    %span.image
                  %input{:type => "radio", :name => "kind", :value => "natural", :id => "kind_field_natural", :checked => true}
                %li.sepia
                  %label{:for => "kind_field_sepia"}
                    %span.name Sepia                
                    %span.image
                  %input{:type => "radio", :name => "kind", :value => "sepia", :id => "kind_field_sepia"}
                %li.improved  
                  %label{:for => "kind_field_improved"}
                    %span.name Improved
                    %span.image    
                  %input{:type => "radio", :name => "kind", :value => "improved", :id => "kind_field_improved"}
                %li.blue
                  %label{:for => "kind_field_blue"}
                    %span.name Blue
                    %span.image
                  %input{:type => "radio", :name => "kind", :value => "blue", :id => "kind_field_blue"}
              
              .fields
                .field
                  %label{:for => "user_field"} Name:                  
                  %input{:type => "text", :name => "user", :value => "Anonymous", :id => "user_field", :maxlength => 30}
                .field
                  %label{:for => "user_field"} Message:
                  %input{:type => "text", :name => "message", :value => "Look at this!", :id => "message_field", :maxlength => 80}
                  
              %input{:type => "submit", :value => "Share"}
             
        -# Container of the live share steam
        .stream_section
          %h2 Live share stream
          %ul.stream
          
        
        .technical_details
          %ol
            %li Cloudinary's jQuery plugin is used to perform direct uploading to the cloud from the browser.
            %li Signature for authorizing uploads to Cloudinary are generated on the server side and included in the HTML page.
            %li Cloudinary's cloud-based transformations are applied: generating thumbnails using face detection based cropping, adding a watermark, applying effects.
            %li Cloudinary's image identifier as well as user name and message are sent to the web server that securely publishes a real time message to a PubNub channel.
            %li The web page uses PubNub's Javascript library to subscribe to a real-time live messaging channel shared by all users.
            %li Messages received via PubNub are used to trigger the live shared photos stream's display.
            %li The thumbnails and full-size images are generated and delivered through a fast CDN by Cloudinary. Image URLs are built using Cloudinary's jQuery plugin based on the identifier included in the PubNub message.
            %li Previously published messages are also displayed on page loading using PubNub's History support.
          %p
            Full sources are available on 
            %a{:href => "https://github.com/cloudinary/cloudinary_pubnub_demo", :target => "_blank"} GitHub
          %a{:href => "#", :class => "close"} Close   
